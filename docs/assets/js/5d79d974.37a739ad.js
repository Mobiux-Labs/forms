"use strict";(self.webpackChunkform_docs=self.webpackChunkform_docs||[]).push([[7556],{294:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>l,default:()=>f,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"form-renderer/fields/core/file","title":"File Field","description":"The File Field component is a form field used for uploading files in a React application. It leverages the React Hook Form library to manage form state and validation, providing a seamless experience for handling file inputs.","source":"@site/docs/form-renderer/fields/core/file.md","sourceDirName":"form-renderer/fields/core","slug":"/form-renderer/fields/core/file","permalink":"/forms/docs/form-renderer/fields/core/file","draft":false,"unlisted":false,"editUrl":"https://github.com/Mobiux-Labs/forms/tree/main/docs/docs/form-renderer/fields/core/file.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_label":"File","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Radio","permalink":"/forms/docs/form-renderer/fields/core/radio"},"next":{"title":"Layout & Spacers","permalink":"/forms/docs/category/layout--spacers"}}');var o=n(4848),s=n(8453);const t={sidebar_label:"File",sidebar_position:7},l="File Field",a={},d=[{value:"Features",id:"features",level:2},{value:"Usage",id:"usage",level:2}];function c(e){const i={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"file-field",children:"File Field"})}),"\n",(0,o.jsx)(i.p,{children:"The File Field component is a form field used for uploading files in a React application. It leverages the React Hook Form library to manage form state and validation, providing a seamless experience for handling file inputs."}),"\n",(0,o.jsxs)(i.blockquote,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Note"}),": This is a very basic file field. It does not support drag-and-drop features or any advanced functionalities. It functions similarly to a standard ",(0,o.jsx)(i.code,{children:'<input type="file">'}),". If you require a more feature-rich file input, consider building a custom field. Refer to the ",(0,o.jsx)(i.a,{href:"/docs/form-renderer/features/custom-field",children:"Custom Field Documentation"})," for guidance, or check if a new extendable package for files has been added in the ",(0,o.jsx)(i.a,{href:"/docs/category/extended",children:"Extended Documentation"}),"."]}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"features",children:"Features"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"File Upload"}),": Allows users to select and upload files."]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Customizable Styles"}),": Supports custom styles for input, label, and error messages."]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Validation"}),": Integrates with ",(0,o.jsx)(i.code,{children:"react-hook-form"})," for validation rules and error handling."]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Visibility Control"}),": Can be hidden or shown based on the ",(0,o.jsx)(i.code,{children:"visibility"})," property."]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Disabled State"}),": Supports disabling the file input field."]}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(i.p,{children:["To use the ",(0,o.jsx)(i.code,{children:"FileField"})," component, define a field definition object with the necessary properties."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-tsx",children:"{\n  formKey: 'upload', // Unique identifier for the field\n  type: 'file', // Field type for rendering a file input component\n  style: { input: 'input-class', label: 'label-class', error: 'error-class' }, // optional\n  fieldProps: { accept: '.jpg,.png', multiple: true }, // optional, HTML attributes for the input element\n  onChange: (files) => console.log(files), // optional, function to handle file changes\n  label: 'Upload File', // optional\n  disabled: false, // optional\n  visibility: 'visible', // optional\n  className: 'file-field-container', // optional\n  rules: { required: 'File is required' }, // optional, validation rules\n}\n"})})]})}function f(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>l});var r=n(6540);const o={},s=r.createContext(o);function t(e){const i=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);