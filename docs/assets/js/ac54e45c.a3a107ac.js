"use strict";(self.webpackChunkform_docs=self.webpackChunkform_docs||[]).push([[2235],{9967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>c,frontMatter:()=>d,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"form-renderer/features/dependent-fields","title":"Dependent Field","description":"This example demonstrates how to manage dependent fields using FormRenderer and FormFields from the @mobiux-labs/form-core package. The form dynamically updates the fullname field based on changes to the firstname and last_name fields.","source":"@site/docs/form-renderer/features/dependent-fields.md","sourceDirName":"form-renderer/features","slug":"/form-renderer/features/dependent-fields","permalink":"/forms/docs/form-renderer/features/dependent-fields","draft":false,"unlisted":false,"editUrl":"https://github.com/Mobiux-Labs/forms/tree/main/docs/docs/form-renderer/features/dependent-fields.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_label":"Dependent Field","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Features","permalink":"/forms/docs/category/features"},"next":{"title":"Validation","permalink":"/forms/docs/form-renderer/features/validation"}}');var s=t(4848),o=t(8453);const d={sidebar_label:"Dependent Field",sidebar_position:1},a="Dependent Field",i={},l=[{value:"Explanation",id:"explanation",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"dependent-field",children:"Dependent Field"})}),"\n",(0,s.jsxs)(n.p,{children:["This example demonstrates how to manage dependent fields using ",(0,s.jsx)(n.code,{children:"FormRenderer"})," and ",(0,s.jsx)(n.code,{children:"FormFields"})," from the ",(0,s.jsx)(n.code,{children:"@mobiux-labs/form-core"})," package. The form dynamically updates the ",(0,s.jsx)(n.code,{children:"full_name"})," field based on changes to the ",(0,s.jsx)(n.code,{children:"first_name"})," and ",(0,s.jsx)(n.code,{children:"last_name"})," fields."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import {\n  FormRenderer,\n  FormFields,\n  FieldDefinition,\n  useFormContext,\n} from '@mobiux-labs/form-core';\n\nconst MyForm = () => {\n  const FORM_NAME = 'myForm';\n\n  const { getContext } = useFormContext();\n  const { methods, formData } = getContext ? getContext(FORM_NAME) || {} : {};\n\n  const handleSubmit = (data: any) => {\n    console.log('Form submitted:', data);\n  };\n\n  const fieldDefinitions: FieldDefinition[] = [\n    {\n      formKey: 'first_name',\n      label: 'First Name',\n      type: 'text',\n      style: { input: 'input-md', label: 'label-sm', error: 'error-text' },\n      onChange: (value: string) => {\n        const lastName = formData?.last_name || '';\n        methods?.setValue('full_name', `${value} ${lastName}`);\n      },\n    },\n    {\n      formKey: 'last_name',\n      label: 'Last Name',\n      type: 'text',\n      style: { input: 'input-md', label: 'label-sm', error: 'error-text' },\n      onChange: (value: string) => {\n        const firstName = formData?.first_name || '';\n        methods?.setValue('full_name', `${firstName} ${value}`);\n      },\n    },\n    {\n      formKey: 'full_name',\n      label: 'Full Name',\n      type: 'text',\n      style: { input: 'input-md', label: 'label-sm', error: 'error-text' },\n    },\n  ];\n\n  return (\n    <FormRenderer\n      formName={FORM_NAME}\n      onSubmit={handleSubmit}\n      styles={{\n        'input-md': `w-full rounded-md p-2 bg-[#44444430] text-[#000000]`,\n        'label-md': 'w-full pb-3 text-md text-[#00000080]',\n        'error-text': 'text-red-400 text-sm',\n      }}\n      defaultValues={{ first_name: '', last_name: '', full_name: '' }}\n    >\n      <FormFields\n        formName={FORM_NAME}\n        definitions={fieldDefinitions}\n      />\n    </FormRenderer>\n  );\n};\n\nexport default MyForm;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Form Context"}),": The ",(0,s.jsx)(n.code,{children:"useFormContext"})," hook is used to access the form's context, which provides methods and form data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dynamic Updates"}),": The ",(0,s.jsx)(n.code,{children:"onChange"})," handlers for ",(0,s.jsx)(n.code,{children:"first_name"})," and ",(0,s.jsx)(n.code,{children:"last_name"})," update the ",(0,s.jsx)(n.code,{children:"full_name"})," field by combining their values."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Field Definitions"}),": Each field is defined with a ",(0,s.jsx)(n.code,{children:"formKey"}),", ",(0,s.jsx)(n.code,{children:"label"}),", ",(0,s.jsx)(n.code,{children:"type"}),", and ",(0,s.jsx)(n.code,{children:"style"}),". The ",(0,s.jsx)(n.code,{children:"onChange"})," function is used to handle dependencies."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This approach allows you to create forms where fields can dynamically interact with each other, providing a more responsive user experience."})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>a});var r=t(6540);const s={},o=r.createContext(s);function d(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);