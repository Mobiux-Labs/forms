"use strict";(self.webpackChunkform_docs=self.webpackChunkform_docs||[]).push([[377],{2667:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"form-renderer/features/disabled","title":"Disabled","description":"This documentation explains how to manage the disabled state of form fields using the @mobiux-labs/form-core package. The disabled property in the FieldDefinition type allows you to control whether a field is editable.","source":"@site/docs/form-renderer/features/disabled.md","sourceDirName":"form-renderer/features","slug":"/form-renderer/features/disabled","permalink":"/docs/form-renderer/features/disabled","draft":false,"unlisted":false,"editUrl":"https://github.com/Mobiux-Labs/forms/tree/main/docs/docs/form-renderer/features/disabled.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_label":"Disabled","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Visibility","permalink":"/docs/form-renderer/features/visibility"},"next":{"title":"Custom Field","permalink":"/docs/form-renderer/features/custom-field"}}');var s=t(4848),r=t(8453);const o={sidebar_label:"Disabled",sidebar_position:4},d="Disabled",l={},a=[{value:"How It Works",id:"how-it-works",level:2},{value:"Sample",id:"sample",level:2},{value:"Explanation",id:"explanation",level:3}];function c(e){const i={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"disabled",children:"Disabled"})}),"\n",(0,s.jsxs)(i.p,{children:["This documentation explains how to manage the disabled state of form fields using the ",(0,s.jsx)(i.code,{children:"@mobiux-labs/form-core"})," package. The ",(0,s.jsx)(i.code,{children:"disabled"})," property in the ",(0,s.jsx)(i.code,{children:"FieldDefinition"})," type allows you to control whether a field is editable."]}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsxs)(i.p,{children:["A boolean that determines whether the field is disabled. When set to ",(0,s.jsx)(i.code,{children:"true"}),", the field is not editable."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsxs)(i.p,{children:["The library automatically handles the disabled state for any field type by applying the appropriate behavior based on the field's expected functionality. When the ",(0,s.jsx)(i.code,{children:"disabled"})," property is set to ",(0,s.jsx)(i.code,{children:"true"}),", the field becomes non-editable."]}),"\n",(0,s.jsx)(i.h2,{id:"sample",children:"Sample"}),"\n",(0,s.jsxs)(i.p,{children:["Here's an example of how to define a field with the ",(0,s.jsx)(i.code,{children:"disabled"})," property:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-tsx",children:"const fieldDefinitions: FieldDefinition[] = [\n  {\n    formKey: 'username',\n    label: 'Username',\n    type: 'input',\n    disabled: false, // Set to true to disable the field\n    // You can pass the disabled value dynamically based on conditions\n    style: { input: 'input-md', label: 'label-sm', error: 'error-text' },\n  },\n];\n"})}),"\n",(0,s.jsx)(i.h3,{id:"explanation",children:"Explanation"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Disabled State"}),": The ",(0,s.jsx)(i.code,{children:"disabled"})," property, when set to ",(0,s.jsx)(i.code,{children:"true"}),", makes the field non-editable. This is useful for fields that should not be modified under certain conditions."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Dynamic Behavior"}),": The disabled state can be dynamically controlled based on form state or other conditions, allowing for flexible form interactions."]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["By utilizing the ",(0,s.jsx)(i.code,{children:"disabled"})," property, you can create forms that adapt to user interactions and application logic, enhancing the user experience."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{})})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>d});var n=t(6540);const s={},r=n.createContext(s);function o(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);