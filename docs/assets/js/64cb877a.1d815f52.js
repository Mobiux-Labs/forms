"use strict";(self.webpackChunkform_docs=self.webpackChunkform_docs||[]).push([[221],{7690:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"form-renderer/features/validation","title":"Validation","description":"To implement validation rules in your form using the @mobiux-labs/form-core package, simply add these rules to the rules parameter of each FieldDefinition. The validation rules are integrated with react-hook-form and support various constraints, including:","source":"@site/docs/form-renderer/features/validation.md","sourceDirName":"form-renderer/features","slug":"/form-renderer/features/validation","permalink":"/docs/form-renderer/features/validation","draft":false,"unlisted":false,"editUrl":"https://github.com/Mobiux-Labs/forms/tree/main/docs/docs/form-renderer/features/validation.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Validation","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Dependent Field","permalink":"/docs/form-renderer/features/dependent-fields"},"next":{"title":"Visibility","permalink":"/docs/form-renderer/features/visibility"}}');var t=r(4848),s=r(8453);const l={sidebar_label:"Validation",sidebar_position:2},o="Validation",a={},d=[{value:"Simple Example",id:"simple-example",level:2},{value:"Dynamic Example",id:"dynamic-example",level:2},{value:"Key Points",id:"key-points",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"validation",children:"Validation"})}),"\n",(0,t.jsxs)(n.p,{children:["To implement validation rules in your form using the ",(0,t.jsx)(n.code,{children:"@mobiux-labs/form-core"})," package, simply add these rules to the ",(0,t.jsx)(n.code,{children:"rules"})," parameter of each ",(0,t.jsx)(n.code,{children:"FieldDefinition"}),". The validation rules are integrated with ",(0,t.jsx)(n.code,{children:"react-hook-form"})," and support various constraints, including:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"required"}),": Ensures the field is not left empty."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"min"}),": Sets a minimum value for numeric fields."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"max"}),": Sets a maximum value for numeric fields."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"minLength"}),": Specifies the minimum number of characters for text fields."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"maxLength"}),": Specifies the maximum number of characters for text fields."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pattern"}),": Validates the field value against a regular expression."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"validate"}),": Allows custom validation logic through a function."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["By specifying these rules in the ",(0,t.jsx)(n.code,{children:"rules"})," parameter, you can easily enforce the desired validation constraints for each field in your form."]}),"\n",(0,t.jsx)(n.h2,{id:"simple-example",children:"Simple Example"}),"\n",(0,t.jsxs)(n.p,{children:["Here's an example of a ",(0,t.jsx)(n.code,{children:"FieldDefinition"})," with various validation rules added to the ",(0,t.jsx)(n.code,{children:"rules"})," prop:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "formKey": "full_name",\n  "label": "Full Name",\n  "type": "text",\n  "rules": {\n    "required": "This field is required",\n    "minLength": {\n      "value": 3,\n      "message": "Full Name must be at least 3 characters long"\n    },\n    "maxLength": {\n      "value": 50,\n      "message": "Full Name cannot exceed 50 characters"\n    },\n    "pattern": {\n      "value": "^[A-Za-z ]+$",\n      "message": "Full Name can only contain letters and spaces"\n    }\n  },\n  "style": {\n    "input": "input-md",\n    "label": "label-sm",\n    "error": "error-text"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can adjust these rules and messages according to your form's requirements."}),"\n",(0,t.jsx)(n.h2,{id:"dynamic-example",children:"Dynamic Example"}),"\n",(0,t.jsx)(n.p,{children:"Below is an example of how to set up a form with validation rules dynamically:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import {\n  FormRenderer,\n  FormFields,\n  FieldDefinition,\n  useFormContext,\n} from '@mobiux-labs/form-core';\n\nconst MyForm = () => {\n  const FORM_NAME = 'myForm';\n\n  const { getContext } = useFormContext();\n  const { methods, formData } = getContext ? getContext(FORM_NAME) || {} : {};\n\n  const handleSubmit = (data: any) => {\n    console.log('Form submitted:', data);\n  };\n\n  const fieldDefinitions: FieldDefinition[] = [\n    {\n      formKey: 'full_name',\n      label: 'Full Name',\n      type: 'text',\n      rules: {\n        // Dynamically set the 'required' rule based on the value of 'make_full_name_required'\n        required: formData?.make_full_name_required\n          ? 'This field is required' // Error message if the field is required\n          : undefined, // No validation if the field is not required\n      },\n      style: {\n        input: 'input-md',\n        label: 'label-sm',\n        error: 'error-text',\n      },\n    },\n    {\n      formKey: 'make_full_name_required',\n      label: 'Make full name required',\n      type: 'checkbox',\n      style: {\n        input: 'input-md',\n        label: 'label-sm',\n        error: 'error-text',\n      },\n    },\n  ];\n\n  return (\n    <FormRenderer\n      formName={FORM_NAME}\n      onSubmit={handleSubmit}\n      styles={{\n        'input-md': 'w-full rounded-md p-2 bg-[#44444430] text-[#000000]',\n        'label-md': 'w-full pb-3 text-md text-[#00000080]',\n        'error-text': 'text-red-400 text-sm',\n      }}\n      defaultValues={{ full_name: '' }}\n    >\n      <FormFields\n        formName={FORM_NAME}\n        definitions={fieldDefinitions}\n      />\n    </FormRenderer>\n  );\n};\n\nexport default MyForm;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"key-points",children:"Key Points"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validation Rules"}),": The ",(0,t.jsx)(n.code,{children:"rules"})," property in ",(0,t.jsx)(n.code,{children:"FieldDefinition"})," allows you to specify validation constraints. In this example, the ",(0,t.jsx)(n.code,{children:"full_name"})," field is marked as ",(0,t.jsx)(n.code,{children:"required"})," with a custom error message."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Styling"}),": Custom styles are applied to inputs, labels, and error messages using the ",(0,t.jsx)(n.code,{children:"styles"})," prop in ",(0,t.jsx)(n.code,{children:"FormRenderer"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Form Context"}),": The ",(0,t.jsx)(n.code,{children:"useFormContext"})," hook provides access to form methods and data, enabling dynamic form validation."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This setup ensures that your form fields are validated according to the specified rules, providing immediate feedback to users and improving the overall form experience."})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var i=r(6540);const t={},s=i.createContext(t);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);