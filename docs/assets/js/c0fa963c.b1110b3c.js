"use strict";(self.webpackChunkform_docs=self.webpackChunkform_docs||[]).push([[746],{2701:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"form-renderer/basics/form-fields","title":"Form Fields","description":"FormFields is a flexible component in Mobiux Labs Forms that creates form elements from specified field definitions, integrating smoothly with the form\'s context.","source":"@site/docs/form-renderer/basics/form-fields.md","sourceDirName":"form-renderer/basics","slug":"/form-renderer/basics/form-fields","permalink":"/forms/docs/form-renderer/basics/form-fields","draft":false,"unlisted":false,"editUrl":"https://github.com/Mobiux-Labs/forms/tree/main/docs/docs/form-renderer/basics/form-fields.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_label":"Form Fields","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Form Renderer","permalink":"/forms/docs/form-renderer/basics/form-renderer"},"next":{"title":"Features","permalink":"/forms/docs/category/features"}}');var i=r(4848),o=r(8453);const t={sidebar_label:"Form Fields",sidebar_position:3},d="Form Fields",l={},c=[{value:"Key Responsibilities",id:"key-responsibilities",level:2},{value:"Core Component",id:"core-component",level:2},{value:"Usage",id:"usage",level:2},{value:"Example",id:"example",level:3},{value:"Conclusion",id:"conclusion",level:2}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"form-fields",children:"Form Fields"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"FormFields"})," is a flexible component in Mobiux Labs Forms that creates form elements from specified field definitions, integrating smoothly with the form's context."]}),"\n",(0,i.jsx)(n.h2,{id:"key-responsibilities",children:"Key Responsibilities"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dynamic Rendering"}),": Renders form elements based on provided field definitions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context Integration"}),": Utilizes form context to access form-specific states and methods."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"core-component",children:"Core Component"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"FormFields"})}),": Main component for rendering fields.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Props"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"definitions: FieldDefinition[]"})}),": Array of field definitions to render."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"formName: string"})}),": Identifier for the form in the context."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"FormFields"})," component should be used within a ",(0,i.jsx)(n.code,{children:"FormRenderer"})," to ensure proper context management and rendering of form elements."]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { FormRenderer, FormFields } from '@mobiux-labs/form-core';\n\nconst fieldDefinitions = [\n  {\n    formKey: 'username',\n    label: 'Username',\n    type: 'text',\n    style: { input: 'input-md', label: 'label-sm', error: 'error-text' },\n  },\n  {\n    formKey: 'password',\n    label: 'Password',\n    type: 'password',\n    style: { input: 'input-md', label: 'label-sm', error: 'error-text' },\n  },\n];\n\nconst MyForm = () => {\n  const handleSubmit = (data: any) => {\n    console.log('Form submitted:', data);\n  };\n\n  return (\n    <FormRenderer\n      formName='myForm'\n      onSubmit={handleSubmit}\n      styles={{ input: 'input-class', button: 'button-class' }}\n      defaultValues={{ username: '', password: '' }}\n    >\n      <FormFields\n        definitions={fieldDefinitions}\n        formName='myForm'\n      />\n    </FormRenderer>\n  );\n};\n\nexport default MyForm;\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Tip",type:"tip",children:(0,i.jsxs)(n.p,{children:["When using multiple ",(0,i.jsx)(n.code,{children:"FormFields"})," within the same ",(0,i.jsx)(n.code,{children:"FormRenderer"}),", ensure that the ",(0,i.jsx)(n.code,{children:"formName"})," prop is consistent across all ",(0,i.jsx)(n.code,{children:"FormFields"})," components. This consistency is crucial for maintaining a unified form context and ensuring that all fields are correctly managed and submitted together."]})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"FormFields"})," provides a flexible and extensible way to render form elements based on dynamic field definitions, ensuring seamless integration with the form context."]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>d});var s=r(6540);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);