"use strict";(self.webpackChunkform_docs=self.webpackChunkform_docs||[]).push([[406],{7092:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"form-renderer/features/custom-field","title":"Custom Field","description":"Key Considerations","source":"@site/docs/form-renderer/features/custom-field.md","sourceDirName":"form-renderer/features","slug":"/form-renderer/features/custom-field","permalink":"/forms/docs/form-renderer/features/custom-field","draft":false,"unlisted":false,"editUrl":"https://github.com/Mobiux-Labs/forms/tree/main/docs/docs/form-renderer/features/custom-field.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_label":"Custom Field","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Disabled","permalink":"/forms/docs/form-renderer/features/disabled"},"next":{"title":"Fields","permalink":"/forms/docs/category/fields"}}');var i=r(4848),o=r(8453);const t={sidebar_label:"Custom Field",sidebar_position:5},l="Custom Field",d={},c=[{value:"Key Considerations",id:"key-considerations",level:2},{value:"Example",id:"example",level:2},{value:"Registering a Custom Field",id:"registering-a-custom-field",level:2},{value:"Basic Registration",id:"basic-registration",level:3},{value:"Conditional Registration",id:"conditional-registration",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"custom-field",children:"Custom Field"})}),"\n",(0,i.jsx)(n.h2,{id:"key-considerations",children:"Key Considerations"}),"\n",(0,i.jsx)(n.p,{children:"When creating a custom field, keep the following in mind:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Custom Field Type"}),": Define a ",(0,i.jsx)(n.code,{children:"CustomField"})," type extending ",(0,i.jsx)(n.code,{children:"FieldDefinitionBase"}),". Use ",(0,i.jsx)(n.code,{children:"FieldProps<CustomField>"})," for the props type."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"FieldProps Overview"}),": ",(0,i.jsx)(n.code,{children:"FieldProps"})," is a generic type that provides the necessary properties for rendering a field. It includes:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"field"}),": The field definition with type-specific data."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"styles"}),": An object containing style classes defined in ",(0,i.jsx)(n.code,{children:"FormRenderer"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"methods"}),": Methods returned from the ",(0,i.jsx)(n.code,{children:"useForm"})," hook, facilitating form state management."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"formName"}),": The name of the form."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Implementation Essentials"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Pass ",(0,i.jsx)(n.code,{children:"className"})," to the root element."]}),"\n",(0,i.jsxs)(n.li,{children:["Handle ",(0,i.jsx)(n.code,{children:"visibility"})," and ",(0,i.jsx)(n.code,{children:"disabled"})," states."]}),"\n",(0,i.jsxs)(n.li,{children:["Apply ",(0,i.jsx)(n.code,{children:"styles"})," to elements like labels, errors, and inputs."]}),"\n",(0,i.jsxs)(n.li,{children:["Properly manage ",(0,i.jsx)(n.code,{children:"fieldProps"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Ensure these elements are correctly implemented for seamless integration with Mobiux Labs forms."}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Below is an example of implementing a custom color field:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {\n  errorResolver,\n  FieldDefinitionBase,\n  FieldProps,\n} from '@mobiux-labs/form-core';\nimport React from 'react';\n\nexport type ColorFieldDefinition = FieldDefinitionBase<\n  'custom_color',\n  string,\n  React.ReactNode,\n  { input: string; label: string; error: string }\n>;\n\nconst CustomColorField = (props: FieldProps<ColorFieldDefinition>) => {\n  const { styles, field, methods, formName } = props || {};\n  const {\n    formKey,\n    label,\n    onChange,\n    fieldProps = {},\n    style,\n    disabled,\n    visibility,\n    className,\n  } = field || {};\n\n  const isStylesLoaded = !!styles;\n  const errorMessage = errorResolver(methods?.formState?.errors, formKey);\n\n  return isStylesLoaded ? (\n    <div\n      style={{ display: visibility === 'hidden' ? 'none' : 'block' }}\n      className={className}\n    >\n      <label className={styles?.[style.label]}>{label}</label>\n      <input\n        className={styles?.[style.input]}\n        type='color'\n        id={formKey}\n        {...methods?.register(formKey, {\n          onChange: ({ target: { value } }: any) => {\n            if (typeof onChange === 'function') onChange(value);\n          },\n        })}\n        disabled={disabled}\n        {...fieldProps}\n      />\n      {!!errorMessage && (\n        <label\n          htmlFor={formKey}\n          className={styles?.[style.error]}\n        >\n          {errorMessage}\n        </label>\n      )}\n    </div>\n  ) : null;\n};\n\nexport default CustomColorField;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"registering-a-custom-field",children:"Registering a Custom Field"}),"\n",(0,i.jsx)(n.h3,{id:"basic-registration",children:"Basic Registration"}),"\n",(0,i.jsxs)(n.p,{children:["To register a custom field, use ",(0,i.jsx)(n.code,{children:"FieldRegistry.register"}),". Ensure registration occurs before the ",(0,i.jsx)(n.code,{children:"FormField"})," component renders. It's best to place this at the top of your form component file, outside the component."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { FieldRegistry } from '@mobiux-labs/form-core';\nimport CustomColorField from './CustomColorField';\n\n// Register your custom components here\nFieldRegistry.register('custom_color', CustomColorField);\n\nconst MyComponent = () => {\n  return <FormRenderer>{/* Form content */}</FormRenderer>;\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"For applications with forms across multiple pages, consider registering the custom component at a higher level in your component hierarchy."}),"\n",(0,i.jsx)(n.h3,{id:"conditional-registration",children:"Conditional Registration"}),"\n",(0,i.jsx)(n.p,{children:"To avoid errors from re-registering an existing field type, conditionally register the component:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { FieldRegistry } from '@mobiux-labs/form-core';\nimport CustomColorField from './CustomColorField';\n\nconst MyComponent = () => {\n  if (!FieldRegistry.isRegistered('custom_color')) {\n    FieldRegistry.register('custom_color', CustomColorField);\n  }\n\n  return <FormRenderer>{/* Form content */}</FormRenderer>;\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"By adhering to these guidelines, you can effectively manage custom field registration, ensuring smooth integration and avoiding potential errors."})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var s=r(6540);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);