"use strict";(self.webpackChunkform_docs=self.webpackChunkform_docs||[]).push([[738],{7653:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"form-renderer/fields/definition","title":"Definition","description":"All fields are derived from the FieldDefinitionBase type, which serves as the foundation for defining form fields.","source":"@site/docs/form-renderer/fields/definition.md","sourceDirName":"form-renderer/fields","slug":"/form-renderer/fields/definition","permalink":"/docs/form-renderer/fields/definition","draft":false,"unlisted":false,"editUrl":"https://github.com/Mobiux-Labs/forms/tree/main/docs/docs/form-renderer/fields/definition.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_label":"Definition","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Fields","permalink":"/docs/category/fields"},"next":{"title":"Core","permalink":"/docs/category/core"}}');var s=n(4848),t=n(8453);const o={sidebar_label:"Definition",sidebar_position:1},d="Definition",l={},a=[{value:"Fields",id:"fields",level:2},{value:"Layout &amp; Spacers",id:"layout--spacers",level:2},{value:"Typography",id:"typography",level:2},{value:"Non-Interactive Fields",id:"non-interactive-fields",level:2},{value:"Layout &amp; Spacers",id:"layout--spacers-1",level:3},{value:"Typography",id:"typography-1",level:3}];function c(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"definition",children:"Definition"})}),"\n",(0,s.jsxs)(i.p,{children:["All fields are derived from the ",(0,s.jsx)(i.code,{children:"FieldDefinitionBase"})," type, which serves as the foundation for defining form fields."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-tsx",children:"export type FieldDefinitionBase<T extends string, V, P, S> = {\n  formKey: string; // Unique identifier for field registration with react-hook-form\n  type: T; // Specifies the component type to render\n  style: S; // Style classes specific to the field type\n  fieldProps?: P; // Field-specific props, such as HTML attributes\n  onChange?: (value: V) => void; // Function to handle value changes\n  label?: string; // Helper text for the field\n  disabled?: boolean; // Indicates if the field is disabled\n  visibility?: 'visible' | 'hidden'; // Controls field visibility\n  className?: string; // Additional classes for the field's root element\n  rules?: Omit<\n    RegisterOptions,\n    'valueAsNumber' | 'valueAsDate' | 'setValueAs' | 'disabled'\n  >; // Validation rules for react-hook-form's Controller\n};\n"})}),"\n",(0,s.jsx)(i.h1,{id:"field-categories",children:"Field Categories"}),"\n",(0,s.jsx)(i.p,{children:"The form renderer supports three primary field categories:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.strong,{children:"Fields"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.strong,{children:"Layout & Spacers"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.strong,{children:"Typography"})}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"fields",children:"Fields"}),"\n",(0,s.jsxs)(i.p,{children:["Fields are interactive components that require state management for data handling and user interaction. They are directly derived from ",(0,s.jsx)(i.code,{children:"FieldDefinitionBase"}),"."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-tsx",children:"export type TextFieldDefinition = FieldDefinitionBase<\n  'text', // Component type for rendering an input\n  string, // Data type for the input value\n  React.InputHTMLAttributes<HTMLInputElement>, // Input-specific props\n  { input: string; label: string; error: string } // Style classes for input, label, and error\n>;\n"})}),"\n",(0,s.jsx)(i.h2,{id:"layout--spacers",children:"Layout & Spacers"}),"\n",(0,s.jsxs)(i.p,{children:["These components provide structural layout within the form, such as flex or grid views. They do not require ",(0,s.jsx)(i.code,{children:"formKey"})," or ",(0,s.jsx)(i.code,{children:"onChange"})," as they lack interactive functionality. They are derived from ",(0,s.jsx)(i.code,{children:"FieldDefinitionBase"})," by omitting unnecessary keys."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-tsx",children:"export type LayoutAndSpacersBase<T extends string, P, S> = Omit<\n  FieldDefinitionBase<T, undefined, P, S>,\n  'formKey' | 'onChange' | 'label' | 'rules'\n>;\n"})}),"\n",(0,s.jsx)(i.h2,{id:"typography",children:"Typography"}),"\n",(0,s.jsxs)(i.p,{children:["Typography fields are used for adding headings and descriptions within the form. They are derived from ",(0,s.jsx)(i.code,{children:"LayoutAndSpacersBase"}),", further omitting the ",(0,s.jsx)(i.code,{children:"disabled"})," key."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-tsx",children:"export type TypographyBase<T extends string, P, S> = Omit<\n  LayoutAndSpacersBase<T, P, S>,\n  'disabled'\n>;\n"})}),"\n",(0,s.jsx)(i.h2,{id:"non-interactive-fields",children:"Non-Interactive Fields"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"Layout & Spacers"})," and ",(0,s.jsx)(i.code,{children:"Typography"})," are Non-interactive fields, they enhance form structure and readability without requiring user input."]}),"\n",(0,s.jsx)(i.h3,{id:"layout--spacers-1",children:"Layout & Spacers"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Container"}),": Groups fields with custom styles like flex or grid layouts for organized presentation."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Divider"}),": Adds a horizontal line to visually separate sections within the form."]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"typography-1",children:"Typography"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Heading"}),": Supports ",(0,s.jsx)(i.code,{children:"h1"})," through ",(0,s.jsx)(i.code,{children:"h6"})," elements for section titles and emphasis."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Paragraph"}),": Represents a ",(0,s.jsx)(i.code,{children:"p"})," element for descriptive text or instructions."]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"This documentation provides a comprehensive overview of the field types and their respective roles within the form renderer, ensuring clarity and ease of use for developers."})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>d});var r=n(6540);const s={},t=r.createContext(s);function o(e){const i=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:i},e.children)}}}]);